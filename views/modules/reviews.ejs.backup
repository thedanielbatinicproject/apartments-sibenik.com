<div class="reviews-module" id="reviews-module-<%= unitId %>">
  <div class="reviews-header">
    <h2 class="reviews-title">Recenzije naših gostiju</h2>
    <div class="reviews-summary">
      <div class="rating-badge">EXCELLENT</div>
      <div class="rating-stars">
        <% for (let i = 1; i <= 5; i++) { %>
          <% if (i <= Math.floor(averageRating || 0)) { %>
            <svg class="star star-filled" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          <% } else { %>
            <svg class="star star-empty" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          <% } %>
        <% } %>
      </div>
      <span class="total-reviews"><%= totalReviews || 0 %> reviews</span>
    </div>
    <div class="platform-stats">
      <div class="platform-stat">
        <img src="/images/icons/airbnb.png" alt="Airbnb" class="platform-icon">
        <div class="platform-info">
          <div class="platform-name">Airbnb</div>
          <div class="platform-rating">
            <%= platforms?.airbnb?.rating || 0 %> • <%= platforms?.airbnb?.totalReviews || 0 %> reviews
          </div>
        </div>
      </div>
      <div class="platform-stat">
        <img src="/images/icons/booking.png" alt="Booking.com" class="platform-icon">
        <div class="platform-info">
          <div class="platform-name">Booking.com</div>
          <div class="platform-rating">
            <%= platforms?.booking?.rating || 0 %> • <%= platforms?.booking?.totalReviews || 0 %> reviews
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="reviews-grid">
    <% if (reviews && reviews.length > 0) { %>
      <% reviews.forEach((review, index) => { %>
        <div class="review-card" data-review-id="<%= review.id %>">
          <div class="review-header">
            <div class="reviewer-info">
              <img src="<%= review.guestAvatar || '/images/avatars/default.png' %>" 
                   alt="<%= review.guestName %>" 
                   class="reviewer-avatar"
                   onerror="this.src='/images/avatars/default.png'; this.onerror=null;">
              <div class="reviewer-details">
                <div class="reviewer-name">
                  <%= review.guestName %>
                  <% if (review.isVerified) { %>
                    <svg class="verified-badge" viewBox="0 0 24 24">
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                  <% } %>
                </div>
                <div class="review-date"><%= review.date %></div>
              </div>
            </div>
            <div class="review-platform">
              <img src="/images/icons/<%= review.platform %>.png" 
                   alt="<%= review.platform %>" 
                   class="platform-logo"
                   onerror="this.style.display='none'">
            </div>
          </div>
          
          <div class="review-rating">
            <% for (let i = 1; i <= 5; i++) { %>
              <% if (i <= (review.rating || 0)) { %>
                <svg class="star star-filled" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              <% } else { %>
                <svg class="star star-empty" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              <% } %>
            <% } %>
          </div>
          
          <div class="review-text" data-full-text="<%= encodeURIComponent(review.comment || '') %>">
            <% 
              const maxLength = 150;
              const comment = review.comment || '';
              const truncatedComment = comment.length > maxLength ? 
                comment.substring(0, maxLength).trim() + '...' : comment;
            %>
            <%= truncatedComment %>
          </div>
          
          <div class="review-actions">
            <% if ((review.comment || '').length > 150) { %>
              <button class="read-more-btn" data-review-id="<%= review.id %>">
                Čitaj više
              </button>
            <% } else { %>
              <span></span>
            <% } %>
            <div class="review-helpful" data-review-index="<%= index %>" data-unit-id="<%= unitId %>">
              <img src="/images/icons/upvote.png" alt="Upvote" class="upvote-icon">
              <span class="upvote-count">0</span>
            </div>
          </div>
        </div>
      <% }) %>
    <% } else { %>
      <div class="no-reviews">
        <p>Trenutno nema dostupnih recenzija.</p>
      </div>
    <% } %>
  </div>
</div>

<script>
// Create Set to track expanded reviews
const expandedReviews = new Set();

// Unit ID za upvote funkcionalnost
const currentUnitId = '<%= typeof unitId !== "undefined" ? unitId : "1" %>';

function toggleReview(reviewId) {
  const reviewCard = document.querySelector(`[data-review-id="${reviewId}"]`);
  if (!reviewCard) return;
  
  const reviewText = reviewCard.querySelector('.review-text');
  const button = reviewCard.querySelector('.read-more-btn');
  const fullText = decodeURIComponent(reviewText.dataset.fullText);
  const maxLength = 150;
  const shortText = fullText.length > maxLength ? 
    fullText.substring(0, maxLength).trim() + '...' : fullText;

  if (expandedReviews.has(reviewId)) {
    // Collapse
    expandedReviews.delete(reviewId);
    reviewText.innerHTML = shortText;
    button.textContent = 'Čitaj više';
  } else {
    // Expand
    expandedReviews.add(reviewId);
    reviewText.innerHTML = fullText;
    button.textContent = 'Prikaži manje';
  }

  reviewCard.scrollIntoView({ 
    behavior: 'smooth', 
    block: 'nearest' 
  });
}

// Initialize upvote data
function initializeUpvotes() {
  console.log('Initializing upvotes...');
  
  <% if (typeof upvoteData !== 'undefined' && upvoteData) { %>
    const upvoteData = <%- JSON.stringify(upvoteData) %>;
    console.log('Upvote data:', upvoteData);
    
    Object.keys(upvoteData).forEach(reviewId => {
      const [unitId, reviewIndex] = reviewId.split('_');
      console.log('Processing review:', reviewId, 'unitId:', unitId, 'reviewIndex:', reviewIndex);
      
      const upvoteBtn = document.querySelector(`[data-review-index="${reviewIndex}"]`);
      console.log('Found upvote button for review', reviewIndex, ':', upvoteBtn);
      
      if (upvoteBtn) {
        const countSpan = upvoteBtn.querySelector('.upvote-count');
        console.log('Found count span:', countSpan);
        
        countSpan.textContent = upvoteData[reviewId].count;
        
        if (upvoteData[reviewId].upvoted) {
          upvoteBtn.classList.add('upvoted');
          console.log('Added upvoted class to review', reviewIndex);
        }
      }
    });
  <% } else { %>
    console.log('No upvote data available');
  <% } %>
}

// Handle upvote click
async function handleUpvote(reviewIndex, unitId) {
  console.log('HandleUpvote called with:', { reviewIndex, unitId });
  
  try {
    console.log('Sending request to:', `/reviews/${unitId}/${reviewIndex}/upvote`);
    
    const response = await fetch(`/reviews/${unitId}/${reviewIndex}/upvote`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    console.log('Response status:', response.status);
    
    const data = await response.json();
    console.log('Response data:', data);
    
    if (data.success) {
      const upvoteBtn = document.querySelector(`[data-review-index="${reviewIndex}"]`);
      console.log('Found upvote button:', upvoteBtn);
      
      if (upvoteBtn) {
        const countSpan = upvoteBtn.querySelector('.upvote-count');
        console.log('Found count span:', countSpan, 'current text:', countSpan?.textContent);
        
        if (countSpan) {
          countSpan.textContent = data.count;
          console.log('Updated count to:', data.count);
        }
        
        if (data.upvoted) {
          upvoteBtn.classList.add('upvoted');
          console.log('Added upvoted class');
          
          // Add success animation
          upvoteBtn.style.animation = 'none';
          setTimeout(() => {
            upvoteBtn.style.animation = 'upvotePulse 2s ease-in-out infinite';
          }, 10);
        } else {
          upvoteBtn.classList.remove('upvoted');
          upvoteBtn.style.animation = 'none';
          console.log('Removed upvoted class');
        }
        
        // Force a repaint
        upvoteBtn.style.transform = 'scale(1.05)';
        setTimeout(() => {
          upvoteBtn.style.transform = '';
        }, 150);
        
        console.log('Updated button classes:', upvoteBtn.classList.toString());
      } else {
        console.error('Could not find upvote button for index:', reviewIndex);
      }
    } else {
      console.error('Server returned error:', data);
    }
  } catch (error) {
    console.error('Error toggling upvote:', error);
  }
}

// Initialize animations when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  // Add event listener for read more buttons
  document.addEventListener('click', (e) => {
    if (e.target.classList.contains('read-more-btn')) {
      const reviewId = e.target.dataset.reviewId;
      if (reviewId) {
        toggleReview(reviewId);
      }
    }
  });

  // Add event listener for upvote buttons
  document.addEventListener('click', (e) => {
    console.log('Click event detected on:', e.target);
    
    if (e.target.closest('.review-helpful')) {
      console.log('Click on review-helpful detected');
      
      const upvoteBtn = e.target.closest('.review-helpful');
      console.log('Upvote button:', upvoteBtn);
      
      const reviewIndex = upvoteBtn.dataset.reviewIndex;
      console.log('Review index:', reviewIndex);
      console.log('Current unit ID:', currentUnitId);
      
      if (reviewIndex && currentUnitId) {
        console.log('Calling handleUpvote with:', reviewIndex, currentUnitId);
        handleUpvote(reviewIndex, currentUnitId);
      } else {
        console.log('Missing reviewIndex or currentUnitId');
      }
    }
  });

  // Initialize upvotes
  initializeUpvotes();
  
  // Add slight delay to ensure DOM is fully ready  
  setTimeout(() => {
    console.log('DOM ready, current unit ID:', currentUnitId);
    console.log('All upvote buttons:', document.querySelectorAll('.review-helpful'));
  }, 100);

  const reviewCards = document.querySelectorAll('.review-card');
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.opacity = '1';
        entry.target.style.transform = 'translateY(0)';
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  });

  reviewCards.forEach((card, index) => {
    card.style.opacity = '0';
    card.style.transform = 'translateY(20px)';
    card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
    observer.observe(card);
  });
});
</script>
