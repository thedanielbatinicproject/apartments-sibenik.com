<link rel="stylesheet" href="/stylesheets/index/calendar.css">
<% const calendarId = 'calendar-' + Math.random().toString(36).substr(2, 9); %>
<div class="calendar-container">
  <div class="calendar-header">
    <button class="calendar-arrow" id="<%= calendarId %>-prevMonth">&#60;</button>
    <span id="<%= calendarId %>-monthYear"></span>
    <button class="calendar-arrow" id="<%= calendarId %>-nextMonth">&#62;</button>
  </div>
  <div class="calendar-grid" id="<%= calendarId %>-grid"></div>
</div>
<script>
  (function() {
    const calendarData = (<%- JSON.stringify(calendarData || []) %>);
    const calendarId = '<%= calendarId %>';
    
    // Kopiraj sve funkcije iz calendar.js
    function getMonthDays(year, month) {
      return new Date(year, month + 1, 0).getDate();
    }
    
    function getDayNames(firstDay) {
      const days = ["M", "T", "W", "T", "F", "S", "S"];
      return days.slice(firstDay).concat(days.slice(0, firstDay));
    }
    
    function getFirstDayOfMonth(year, month) {
      let jsDay = new Date(year, month, 1).getDay();
      return jsDay === 0 ? 6 : jsDay - 1;
    }
    
    function parseEvents(events, year, month) {
      const map = {};
      // Danas bez timezone konverzije - ista logika kao backend
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      events.forEach((ev, idx) => {
        if (!ev.pocetak || !ev.kraj) return;
        
        // Postavlja boju na osnovu datuma eventi
        if (!ev._color) {
          const eventStart = new Date(ev.pocetak);
          const eventEnd = new Date(ev.kraj);
          
          // Jednostavna usporedba bez timezone konverzije - kao backend
          if (eventEnd < today) {
            // Prošli eventi - svetlo plava
            ev._color = 'rgba(100, 180, 255, 0.55)';
          } else if (eventStart > today) {
            // Budući eventi - tamno plava
            ev._color = 'rgba(30, 100, 200, 0.65)';
          } else {
            // Trenutni eventi - srednja plava
            ev._color = 'rgba(30, 144, 255, 0.6)';
          }
        }
        const start = new Date(ev.pocetak);
        const end = new Date(ev.kraj);
        
        // Koristi UTC datume - potpuno ista logika kao backend
        const localStart = new Date(
          start.getUTCFullYear(),
          start.getUTCMonth(),
          start.getUTCDate()
        );
        const localEnd = new Date(
          end.getUTCFullYear(), 
          end.getUTCMonth(), 
          end.getUTCDate()
        );
        
        let firstDay = null, lastDay = null;
        for (
          let d = new Date(localStart);
          d <= localEnd;
          d.setDate(d.getDate() + 1)
        ) {
          if (d.getFullYear() === year && d.getMonth() === month) {
            const day = d.getDate();
            if (!map[day]) map[day] = [];
            map[day].push({
              ...ev,
              _eventId: ev.event_uuid || `fallback_${idx}`,
              _start: localStart,
              _end: localEnd,
              _color: ev._color,
            });
            if (!firstDay || day < firstDay) firstDay = day;
            if (!lastDay || day > lastDay) lastDay = day;
          }
        }
        if (firstDay && lastDay) {
          for (let d = firstDay; d <= lastDay; d++) {
            if (!map[d]) map[d] = [];
            map[d].forEach((e) => {
              if (e._eventId === (ev.event_uuid || `fallback_${idx}`)) {
                e._firstDay = firstDay;
                e._lastDay = lastDay;
              }
            });
          }
        }
      });
      return map;
    }
    
    function getEventClass(events, day, year, month) {
      if (!events || !events[day]) return { left: [], middle: [], right: [] };
      let left = [], middle = [], right = [];
      const daysInMonth = getMonthDays(year, month);

      events[day].forEach((ev) => {
        const eventStartDay = ev._start.getDate();
        const eventStartMonth = ev._start.getMonth();
        const eventEndDay = ev._end.getDate();
        const eventEndMonth = ev._end.getMonth();

        if (day === daysInMonth) {
          const starts = (eventStartDay === day && eventStartMonth === month);
          const ends = (eventEndDay === day && eventEndMonth === month);

          if (starts && ends) {
            left.push({ className: "event-end", eventId: ev._eventId, color: ev._color });
            right.push({ className: "event-start", eventId: ev._eventId, color: ev._color });
          } else if (starts) {
            right.push({ className: "event-start", eventId: ev._eventId, color: ev._color });
          } else if (ends) {
            left.push({ className: "event-end", eventId: ev._eventId, color: ev._color });
          } else {
            left.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
            middle.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
            right.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
          }
          return;
        }

        if (day === 1) {
          const starts = (eventStartDay === day && eventStartMonth === month);
          const ends = (eventEndDay === day && eventEndMonth === month);

          if (starts && ends) {
            left.push({ className: "event-end", eventId: ev._eventId, color: ev._color });
            right.push({ className: "event-start", eventId: ev._eventId, color: ev._color });
          } else if (starts) {
            right.push({ className: "event-start", eventId: ev._eventId, color: ev._color });
          } else if (ends) {
            left.push({ className: "event-end", eventId: ev._eventId, color: ev._color });
          } else {
            left.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
            middle.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
            right.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
          }
          return;
        }

        if (ev._firstDay === ev._lastDay) {
          middle.push({ className: "event-single-day-orange", eventId: ev._eventId, color: ev._color });
        }
        else if (day === ev._firstDay) {
          right.push({ className: "event-start", eventId: ev._eventId, color: ev._color });
        }
        else if (day === ev._lastDay) {
          left.push({ className: "event-end", eventId: ev._eventId, color: ev._color });
        }
        else {
          left.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
          middle.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
          right.push({ className: "event-full", eventId: ev._eventId, color: ev._color });
        }
      });
      return { left, middle, right };
    }
    
    function renderCalendar(year, month, events) {
      const grid = document.getElementById(calendarId + '-grid');
      grid.innerHTML = "";
      const firstDay = getFirstDayOfMonth(year, month);
      const dayNames = getDayNames(0);
      dayNames.forEach((dn) => {
        const el = document.createElement("div");
        el.className = "calendar-dayname";
        el.textContent = dn;
        grid.appendChild(el);
      });
      const daysInMonth = getMonthDays(year, month);
      let startOffset = firstDay;
      for (let i = 0; i < startOffset; i++) {
        const el = document.createElement("div");
        el.className = "calendar-cell empty-cell";
        el.style.visibility = "hidden";
        grid.appendChild(el);
      }
      for (let day = 1; day <= daysInMonth; day++) {
        const el = document.createElement("div");
        el.className = "calendar-cell";
        
        // Označava današnji dan - bez timezone konverzije za konzistentnost
        const now = new Date();
        if (now.getFullYear() === year && now.getMonth() === month && now.getDate() === day) {
          el.className += " today";
        }
        
        const { left, middle, right } = getEventClass(events, day, year, month);

        left.forEach((evClassObj) => {
          const part = document.createElement("div");
          part.className = "cell-part left " + evClassObj.className;
          part.setAttribute("data-event-id", evClassObj.eventId);
          part.style.background = evClassObj.color;
          el.appendChild(part);
        });
        middle.forEach((evClassObj) => {
          const part = document.createElement("div");
          part.className = "cell-part middle " + evClassObj.className;
          part.setAttribute("data-event-id", evClassObj.eventId);
          part.style.background = evClassObj.color;
          el.appendChild(part);
        });
        right.forEach((evClassObj) => {
          const part = document.createElement("div");
          part.className = "cell-part right " + evClassObj.className;
          part.setAttribute("data-event-id", evClassObj.eventId);
          part.style.background = evClassObj.color;
          el.appendChild(part);
        });

        const span = document.createElement("span");
        span.textContent = day;
        el.appendChild(span);
        grid.appendChild(el);
      }
      addEventHoverHandlers();
    }
    
    function addEventHoverHandlers() {
      document.querySelectorAll("#" + calendarId + "-grid .cell-part[data-event-id]").forEach((part) => {
        part.addEventListener("mouseenter", function () {
          const eventId = part.getAttribute("data-event-id");
          document
            .querySelectorAll(`#${calendarId}-grid .cell-part[data-event-id="${eventId}"]`)
            .forEach((el) => {
              if (el.classList.contains("event-full"))
                el.classList.add("event-hover");
              if (el.classList.contains("event-start"))
                el.classList.add("event-hover-start");
              if (el.classList.contains("event-end"))
                el.classList.add("event-hover-end");
            });
        });
        part.addEventListener("mouseleave", function () {
          const eventId = part.getAttribute("data-event-id");
          document
            .querySelectorAll(`#${calendarId}-grid .cell-part[data-event-id="${eventId}"]`)
            .forEach((el) => {
              el.classList.remove("event-hover");
              el.classList.remove("event-hover-start");
              el.classList.remove("event-hover-end");
            });
        });
      });
    }
    
    // Inicijalizacija kalendara - bez timezone konverzije za konzistentnost s backend-om
    const now = new Date();
    let year = now.getFullYear();
    let month = now.getMonth();
    let events = parseEvents(calendarData, year, month);
    
    function update() {
      // Kreiraj datum za trenutni mjesec i godinu - engleski nazivi s velikim slovom
      const currentDate = new Date(year, month, 1);
      document.getElementById(calendarId + '-monthYear').textContent = `${currentDate.toLocaleString("en-US", {
        month: "long"
      })} ${year}`;
      events = parseEvents(calendarData, year, month);
      renderCalendar(year, month, events);
    }
    
    document.getElementById(calendarId + '-prevMonth').onclick = function () {
      month--;
      if (month < 0) {
        month = 11;
        year--;
      }
      update();
    };
    
    document.getElementById(calendarId + '-nextMonth').onclick = function () {
      month++;
      if (month > 11) {
        month = 0;
        year++;
      }
      update();
    };
    
    update();
  })();
</script>