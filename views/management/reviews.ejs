<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/management/reviews.css">
</head>
<body>
    <div class="reviews-container">
    <div class="reviews-container">
        <!-- Page Header -->
        <div class="page-header">
            <div>
                <h1 style="color: #fff; margin: 0; font-size: 2rem;">Reviews Management</h1>
                <p style="color: rgba(255, 255, 255, 0.7); margin: 0.5rem 0 0 0;">Add, edit or remove reviews from website</p>
            </div>
            <div style="display: flex; gap: 1rem; align-items: center;">
                <button class="add-review-btn" onclick="openAddModal()">
                    <span>+</span>
                    Add New Review
                </button>
                <a href="/management" class="return-btn">
                    <span>‚Üê</span>
                    Return to Dashboard
                </a>
            </div>
        </div>

        <!-- Unit Selection Tabs -->
        <div class="unit-tabs">
            <button class="unit-tab active" onclick="switchUnit(1)" data-unit="1">
                Apartment with Garden (Unit 1)
            </button>
            <button class="unit-tab" onclick="switchUnit(2)" data-unit="2">
                Studio Apartment (Unit 2)
            </button>
        </div>

        <!-- Reviews Grid -->
        <div class="reviews-grid" id="reviewsGrid">
            <!-- Reviews will be loaded here dynamically -->
        </div>

        <!-- Load More Button -->
        <button class="load-more-btn" id="loadMoreBtn" onclick="loadMoreReviews()" style="display: none;">
            Load More Reviews
        </button>
    </div>

    <!-- Add/Edit Review Modal -->
    <div id="reviewModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2 id="modalTitle" style="color: #fff; margin-bottom: 2rem;">Add New Review</h2>
            
            <form id="reviewForm" enctype="multipart/form-data">
                <input type="hidden" id="reviewId" name="reviewId">
                
                <div class="form-group">
                    <label for="unitId">Unit</label>
                    <select id="unitId" name="unitId" required>
                        <option value="">Select Unit</option>
                        <option value="1">Apartment with Garden (Unit 1)</option>
                        <option value="2">Studio Apartment (Unit 2)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="platform">Platform</label>
                    <select id="platform" name="platform" required>
                        <option value="">Select Platform</option>
                        <option value="airbnb">Airbnb</option>
                        <option value="booking">Booking.com</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="guestName">Guest Name</label>
                    <input type="text" id="guestName" name="guestName" required>
                </div>

                <div class="form-group">
                    <label for="avatarFile">Guest Avatar (Image)</label>
                    <div class="file-upload">
                        <input type="file" id="avatarFile" name="avatarFile" accept="image/*">
                        <label for="avatarFile" class="file-upload-label">
                            Choose image file or drag and drop
                        </label>
                    </div>
                    <div class="file-preview" id="filePreview">
                        <svg class="file-preview-icon" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                        <div class="file-preview-info">
                            <div class="file-preview-name" id="filePreviewName"></div>
                            <div class="file-preview-size" id="filePreviewSize"></div>
                        </div>
                        <button type="button" class="file-preview-remove" id="filePreviewRemove">
                            ‚úï
                        </button>
                    </div>
                    <div class="avatar-actions" style="margin-top: 0.5rem; display: none;" id="avatarActions">
                        <button type="button" id="removeAvatarBtn" class="remove-avatar-btn">
                            üóëÔ∏è Remove Current Avatar
                        </button>
                        <input type="hidden" id="removeAvatar" name="removeAvatar" value="false">
                    </div>
                    <small style="color: rgba(255,255,255,0.6); margin-top: 0.5rem; display: block;">
                        Leave empty to use default avatar. Supported: JPG, PNG, WebP
                    </small>
                </div>

                <div class="form-group">
                    <label for="reviewDate">Review Date</label>
                    <input type="date" id="reviewDate" name="reviewDate" required>
                </div>

                <div class="form-group">
                    <label for="rating">Rating</label>
                    <select id="rating" name="rating" required>
                        <option value="">Select Rating</option>
                        <option value="1">1 Star</option>
                        <option value="2">2 Stars</option>
                        <option value="3">3 Stars</option>
                        <option value="4">4 Stars</option>
                        <option value="5">5 Stars</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="comment">Review Comment</label>
                    <textarea id="comment" name="comment" placeholder="Enter the review comment..." required></textarea>
                </div>

                <div class="form-group">
                    <label for="upvotes">Upvotes Count</label>
                    <input type="number" id="upvotes" name="upvotes" min="0" value="0" placeholder="Number of upvotes">
                </div>

                <div class="form-group">
                    <label>Verified Guest</label>
                    <div class="checkbox-group">
                        <input type="checkbox" id="isVerified" name="isVerified" checked>
                        <label for="isVerified">Mark as verified guest</label>
                    </div>
                </div>

                <button type="submit" class="btn-submit">
                    <span id="submitText">Add Review</span>
                </button>
            </form>
        </div>
    </div>

    <script>
        let currentUnit = 1;
        let currentReviews = [];
        let displayedCount = 6; // Initially show 6 reviews
        const REVIEWS_PER_LOAD = 6;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadReviews();
        });

        // Switch between units
        function switchUnit(unitId) {
            currentUnit = unitId;
            displayedCount = 6; // Reset displayed count
            
            // Update tab appearance
            document.querySelectorAll('.unit-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`[data-unit="${unitId}"]`).classList.add('active');
            
            // Load reviews for the selected unit
            loadReviews();
        }

        // Load reviews from server
        async function loadReviews() {
            try {
                const response = await fetch(`/management/api/reviews`);
                const data = await response.json();
                
                // Filter reviews by current unit
                currentReviews = data.filter(review => review.unitId == currentUnit) || [];
                displayReviews();
            } catch (error) {
                console.error('Error loading reviews:', error);
                document.getElementById('reviewsGrid').innerHTML = 
                    '<p style="color: rgba(255,255,255,0.7); text-align: center; grid-column: 1 / -1;">Error loading reviews</p>';
            }
        }

        // Display reviews in the grid
        function displayReviews() {
            const grid = document.getElementById('reviewsGrid');
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            
            // Remove existing counter
            const existingCounter = document.querySelector('.reviews-counter');
            if (existingCounter) {
                existingCounter.remove();
            }
            
            if (currentReviews.length === 0) {
                grid.innerHTML = '<div class="empty-state"><h3>No Reviews Found</h3><p>No reviews found for this unit. Click "Add New Review" to add the first review.</p></div>';
                loadMoreBtn.style.display = 'none';
                return;
            }

            // Show reviews up to displayedCount
            const reviewsToShow = currentReviews.slice(0, displayedCount);
            
            grid.innerHTML = reviewsToShow.map(review => `
                <div class="review-card" data-review-id="${review.id}">
                    <div class="review-header">
                        <img src="${review.guestAvatar}" alt="${review.guestName}" class="review-avatar" 
                             onerror="this.src='/images/avatars/default.png'">
                        <div class="review-info">
                            <h4>${review.guestName}</h4>
                            <div class="review-meta">
                                <span class="platform-badge platform-${review.platform}">
                                    ${review.platform === 'airbnb' ? 'Airbnb' : 'Booking.com'}
                                </span>
                                <span class="rating-stars">${'‚òÖ'.repeat(review.rating)}${'‚òÜ'.repeat(5-review.rating)}</span>
                                <span>${review.date}</span>
                                ${review.isVerified ? '<span style="color: #4ade80;">‚úì Verified</span>' : ''}
                                <span class="upvotes-badge" title="Upvotes">üëç ${review.upvotes || 0}</span>
                            </div>
                        </div>
                    </div>
                    <div class="review-comment">${review.comment}</div>
                    <div class="review-actions">
                        <button class="btn-edit" onclick="editReview(${review.id})">Edit</button>
                        <button class="btn-delete" onclick="deleteReview(${review.id})">Delete</button>
                    </div>
                </div>
            `).join('');

            // Show/hide load more button and add counter
            const hasMoreReviews = displayedCount < currentReviews.length;
            loadMoreBtn.style.display = hasMoreReviews ? 'block' : 'none';
            
            // Add review counter
            if (currentReviews.length > 0) {
                const counter = document.createElement('div');
                counter.className = 'reviews-counter';
                counter.textContent = `Showing ${Math.min(displayedCount, currentReviews.length)} of ${currentReviews.length} reviews`;
                loadMoreBtn.insertAdjacentElement('beforebegin', counter);
            }
        }

        // Load more reviews
        function loadMoreReviews() {
            displayedCount += REVIEWS_PER_LOAD;
            displayReviews();
        }

        // Open add review modal
        function openAddModal() {
            document.getElementById('modalTitle').textContent = 'Add New Review';
            document.getElementById('submitText').textContent = 'Add Review';
            document.getElementById('reviewId').value = '';
            document.getElementById('reviewForm').reset();
            document.getElementById('unitId').value = currentUnit; // Set current unit
            document.getElementById('reviewModal').style.display = 'block';
        }

        // Edit review
        function editReview(reviewId) {
            const review = currentReviews.find(r => r.id === reviewId);
            if (!review) return;

            document.getElementById('modalTitle').textContent = 'Edit Review';
            document.getElementById('submitText').textContent = 'Update Review';
            document.getElementById('reviewId').value = reviewId;
            document.getElementById('unitId').value = review.unitId;
            document.getElementById('platform').value = review.platform;
            document.getElementById('guestName').value = review.guestName;
            
            // Parse the date - handle different date formats
            let dateValue = '';
            if (review.date) {
                try {
                    // Handle formats like "5. October, 2024" or "16. August, 2024"
                    const dateParts = review.date.match(/(\d{1,2})\.\s*(\w+),?\s*(\d{4})/);
                    if (dateParts) {
                        const months = {
                            'January': '01', 'February': '02', 'March': '03', 'April': '04',
                            'May': '05', 'June': '06', 'July': '07', 'August': '08',
                            'September': '09', 'October': '10', 'November': '11', 'December': '12'
                        };
                        const day = dateParts[1].padStart(2, '0');
                        const month = months[dateParts[2]];
                        const year = dateParts[3];
                        if (month) {
                            dateValue = `${year}-${month}-${day}`;
                        }
                    } else {
                        // Try other formats
                        const altParts = review.date.match(/(\d{1,2})\s+(\w+),?\s*(\d{4})/);
                        if (altParts) {
                            const months = {
                                'January': '01', 'February': '02', 'March': '03', 'April': '04',
                                'May': '05', 'June': '06', 'July': '07', 'August': '08',
                                'September': '09', 'October': '10', 'November': '11', 'December': '12'
                            };
                            const day = altParts[1].padStart(2, '0');
                            const month = months[altParts[2]];
                            const year = altParts[3];
                            if (month) {
                                dateValue = `${year}-${month}-${day}`;
                            }
                        }
                    }
                } catch (e) {
                    console.log('Date parsing error:', e);
                }
            }
            
            document.getElementById('reviewDate').value = dateValue;
            document.getElementById('rating').value = review.rating;
            document.getElementById('comment').value = review.comment;
            document.getElementById('upvotes').value = review.upvotes || 0;
            document.getElementById('isVerified').checked = review.isVerified;
            
            // Show/hide remove avatar button based on whether review has custom avatar
            const avatarActions = document.getElementById('avatarActions');
            const removeAvatarInput = document.getElementById('removeAvatar');
            
            if (review.guestAvatar && !review.guestAvatar.includes('/default-avatar.png')) {
                avatarActions.style.display = 'block';
            } else {
                avatarActions.style.display = 'none';
            }
            
            // Reset remove avatar flag
            removeAvatarInput.value = 'false';
            
            document.getElementById('reviewModal').style.display = 'block';
        }

        // Delete review
        async function deleteReview(reviewId) {
            if (!confirm('Are you sure you want to delete this review?')) return;

            try {
                const response = await fetch(`/management/api/reviews/${reviewId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadReviews(); // Reload reviews
                } else {
                    alert('Error deleting review');
                }
            } catch (error) {
                console.error('Error deleting review:', error);
                alert('Error deleting review');
            }
        }

        // Close modal
        function closeModal() {
            document.getElementById('reviewModal').style.display = 'none';
            
            // Reset file preview
            document.getElementById('avatarFile').value = '';
            document.getElementById('filePreview').classList.remove('active');
            
            // Reset avatar actions
            document.getElementById('avatarActions').style.display = 'none';
            document.getElementById('removeAvatar').value = 'false';
            
            // Reset remove avatar button appearance
            const removeBtn = document.getElementById('removeAvatarBtn');
            removeBtn.textContent = 'üóëÔ∏è Remove Current Avatar';
            removeBtn.style.background = '';
            removeBtn.style.color = '';
            removeBtn.style.borderColor = '';
        }

        // Handle form submission
        document.getElementById('reviewForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const reviewId = document.getElementById('reviewId').value;
            
            const url = reviewId ? 
                `/management/api/reviews/${reviewId}` : 
                '/management/api/reviews';
            
            const method = reviewId ? 'PUT' : 'POST';

            try {
                const response = await fetch(url, {
                    method: method,
                    body: formData
                });

                if (response.ok) {
                    closeModal();
                    loadReviews(); // Reload reviews
                } else {
                    const error = await response.json();
                    alert('Error: ' + (error.message || 'Failed to save review'));
                }
            } catch (error) {
                console.error('Error saving review:', error);
                alert('Error saving review');
            }
        });

        // Remove avatar button functionality
        document.getElementById('removeAvatarBtn').addEventListener('click', function() {
            if (confirm('Are you sure you want to remove the current avatar? This will set the avatar to default.')) {
                document.getElementById('removeAvatar').value = 'true';
                document.getElementById('avatarActions').style.display = 'none';
                
                // Visual feedback
                const btn = this;
                btn.textContent = '‚úì Avatar will be removed';
                btn.style.background = 'rgba(34, 197, 94, 0.2)';
                btn.style.color = '#22c55e';
                btn.style.borderColor = 'rgba(34, 197, 94, 0.3)';
            }
        });

        // File input change handler
        document.getElementById('avatarFile').addEventListener('change', function(e) {
            const file = e.target.files[0];
            const filePreview = document.getElementById('filePreview');
            const fileName = document.getElementById('filePreviewName');
            const fileSize = document.getElementById('filePreviewSize');
            
            if (file) {
                // Show file preview
                filePreview.classList.add('active');
                fileName.textContent = `Selected image: ${file.name}`;
                fileSize.textContent = formatFileSize(file.size);
                
                // Hide avatar actions if they were visible
                document.getElementById('avatarActions').style.display = 'none';
                document.getElementById('removeAvatar').value = 'false';
            } else {
                // Hide file preview
                filePreview.classList.remove('active');
            }
        });

        // File preview remove button
        document.getElementById('filePreviewRemove').addEventListener('click', function() {
            document.getElementById('avatarFile').value = '';
            document.getElementById('filePreview').classList.remove('active');
        });

        // Format file size helper function
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('reviewModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
