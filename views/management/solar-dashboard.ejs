<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/management/solar-dashboard.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Full-screen background and responsive layout */
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            color: white;
        }

        .management-container {
            width: 100%;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }

        .dashboard-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .dashboard-title {
            font-size: 2.5rem;
            margin: 0 0 10px 0;
            font-weight: 300;
        }

        .dashboard-subtitle {
            font-size: 1.1rem;
            margin: 0 0 20px 0;
            opacity: 0.8;
        }

        .live-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: rgba(255, 255, 255, 0.1);
            padding: 8px 16px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }

        .live-dot {
            width: 8px;
            height: 8px;
            background: #4CAF50;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Responsive grid layout */
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 15px;
            margin-bottom: 40px;
        }

        @media (min-width: 1200px) {
            .dashboard-grid {
                grid-template-columns: repeat(5, 1fr);
            }
        }

        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 12px;
            }
        }

        @media (max-width: 480px) {
            .dashboard-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 8px;
            }
            
            .dashboard-card {
                padding: 10px;
                min-height: 70px;
            }
            
            .card-title {
                font-size: 0.8rem;
            }
            
            .card-value {
                font-size: 1rem;
            }
            
            .card-unit {
                font-size: 0.6rem;
            }
        }

        /* Modern card design */
        .dashboard-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 16px;
            position: relative;
            transition: all 0.3s ease;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            min-height: 100px;
        }

        .dashboard-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
        }

        .card-title {
            font-size: 0.8rem;
            font-weight: 500;
            margin: 0 0 6px 0;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            line-height: 1.2;
        }

        .card-value {
            font-size: 1.6rem;
            font-weight: 600;
            margin: 0 0 4px 0;
            color: #fff;
            line-height: 1;
        }

        .card-unit {
            font-size: 0.75rem;
            opacity: 0.6;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Info button and tooltip */
        .info-btn {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .info-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .info-tooltip {
            position: fixed;
            background: rgba(240, 240, 240, 0.95);
            backdrop-filter: blur(15px);
            color: #333;
            padding: 16px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            max-width: 300px;
            z-index: 1000;
            font-size: 0.9rem;
            line-height: 1.4;
            display: none;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .tooltip-close {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.1);
            border: none;
            color: #666;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
        }

        .tooltip-close:hover {
            background: rgba(0, 0, 0, 0.2);
        }

        .tooltip-title {
            font-weight: 600;
            margin-bottom: 8px;
            color: #1e3c72;
        }

        /* Mobile tooltip optimization */
        @media (max-width: 768px) {
            .info-tooltip {
                max-width: 250px;
                font-size: 0.8rem;
                padding: 12px;
                position: fixed;
                z-index: 1000;
            }
            
            .tooltip-close {
                width: 20px;
                height: 20px;
                font-size: 14px;
                top: 4px;
                right: 4px;
            }
        }

        /* Data history section */
        .data-history {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 20px;
            margin-top: 30px;
        }

        .history-title {
            font-size: 1.4rem;
            margin: 0 0 20px 0;
            font-weight: 500;
        }

        .history-table-container {
            border-radius: 12px;
            background: rgba(0, 0, 0, 0.1);
            max-height: none; /* Remove vertical scroll limit */
            overflow-y: hidden; /* No vertical scrolling */
            overflow-x: hidden; /* No horizontal scrolling on desktop */
            /* Custom scrollbar styling */
            scrollbar-width: thin;
            scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);
        }

        /* Mobile horizontal scrolling only */
        @media (max-width: 768px) {
            .history-table-container {
                overflow-x: auto; /* Allow horizontal scroll on mobile */
                overflow-y: hidden; /* Still no vertical scroll */
            }
        }

        /* Desktop: absolutely no scrolling */
        @media (min-width: 769px) {
            .history-table-container {
                overflow: hidden;
            }
        }

        /* Webkit scrollbar styling for better browsers */
        .history-table-container::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        .history-table-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        .history-table-container::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
            transition: background 0.3s ease;
        }

        .history-table-container::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }

        .history-table-container::-webkit-scrollbar-corner {
            background: rgba(255, 255, 255, 0.1);
        }

        .history-table {
            width: 100%;
            border-collapse: collapse;
            /* Desktop: fit to container, no horizontal scroll */
        }

        /* Mobile: force horizontal scroll */
        @media (max-width: 768px) {
            .history-table {
                min-width: 1200px;
            }
            
            /* Show more columns on mobile */
            .history-table .mobile-hidden {
                display: table-cell;
            }
        }

        /* Desktop: hide extra columns */
        @media (min-width: 769px) {
            .history-table .mobile-hidden {
                display: none;
            }
        }

        .history-table th,
        .history-table td {
            padding: 8px 6px;
            text-align: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 0.8rem;
            white-space: nowrap;
        }

        /* Desktop: make columns more flexible */
        @media (min-width: 769px) {
            .history-table th,
            .history-table td {
                white-space: normal;
                word-wrap: break-word;
                max-width: 120px;
            }
        }

        .history-table th {
            background: rgb(25, 25, 25); /* Dark grey without transparency */
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 0.7rem;
            position: sticky;
            top: 0;
            z-index: 10;
            color: white;
        }

        .history-table tr:hover {
            background: rgba(255, 255, 255, 0.05);
        }

        .load-more-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            min-width: 140px;
        }

        .load-more-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .load-more-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .export-btn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            font-weight: 600;
            min-width: 160px;
        }

        .export-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);
        }

        .export-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* Chart section */
        .chart-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 20px;
            margin-top: 30px;
        }

        .chart-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .chart-btn {
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .chart-btn:hover,
        .chart-btn.active {
            background: rgba(255, 255, 255, 0.2);
        }

        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .chart-container {
            height: 320px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 15px;
        }

        .chart-subtitle {
            color: #ffffff;
            font-size: 1.1rem;
            font-weight: 600;
            text-align: center;
            margin: 0 0 15px 0;
            padding: 0;
            opacity: 0.9;
        }

        /* Mobile optimizations */
        @media (max-width: 768px) {
            .management-container {
                padding: 15px;
            }

            .dashboard-title {
                font-size: 2rem;
            }

            .dashboard-card {
                padding: 12px;
                min-height: 80px;
            }

            .card-value {
                font-size: 1.4rem;
            }

            .data-history {
                padding: 15px;
            }

            .history-title {
                font-size: 1.2rem;
            }

            .chart-section {
                padding: 15px;
            }

            .charts-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .chart-container {
                height: 350px;
                padding: 10px;
            }

            .chart-subtitle {
                font-size: 1rem;
                margin-bottom: 10px;
            }
        }

        @media (max-width: 480px) {
            .chart-container {
                height: 380px;
                padding: 8px;
            }

            .chart-subtitle {
                font-size: 0.9rem;
                margin-bottom: 8px;
            }
        }

            .history-table th,
            .history-table td {
                padding: 6px 4px;
                font-size: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <div class="management-container">
        <div class="dashboard-header">
            <h1 class="dashboard-title">Solar Management Dashboard</h1>
            <p class="dashboard-subtitle">Real-time monitoring of MPPT solar charge controller</p>
            <div class="live-indicator">
                <div class="live-dot"></div>
                <span>Live Data</span>
            </div>
        </div>

        <% if (latestData) { %>
        <div class="dashboard-grid">
            <% 
            // Define all variables to display (using new Arduino format names)
            const displayVariables = [
                // Basic Info
                'Machine_type_high', 'Machine_type_low', 'Serial_number_high', 'Serial_number_low', 
                'Hardware_version', 'Software_version', 'Protocol_version',
                
                // System Info
                'AC_voltage_grade', 'Rated_power_VA',
                
                // Voltages
                'Battery_voltage_V', 'Inverter_voltage_V', 'Grid_voltage_V', 'Bus_voltage_V',
                
                // Currents
                'Control_current_A', 'Inverter_current_A', 'Grid_current_A', 'Load_current_A',
                
                // Powers
                'P_Inverter_W', 'P_Grid_W', 'P_Load_W', 'Load_percent', 
                'S_Inverter_VA', 'S_Grid_VA', 'S_Load_VA',
                
                // Reactive Powers
                'Q_Inverter_var', 'Q_Grid_var', 'Q_Load_var',
                
                // Frequencies
                'Inverter_freq_Hz', 'Grid_freq_Hz',
                
                // Inverter Data
                'Inverter_max_number', 'Combine_type', 'Inverter_number',
                
                // Temperatures
                'AC_radiator_temp_C', 'Transformer_temp_C', 'DC_radiator_temp_C',
                
                // Relay States
                'Inverter_relay_state', 'Grid_relay_state', 'Load_relay_state', 
                'N_Line_relay_state', 'DC_relay_state', 'Earth_relay_state',
                
                // Accumulated Energy
                'Accum_charger_power_total_KWH', 'Accum_discharger_power_total_KWH',
                'Accum_buy_power_total_KWH', 'Accum_sell_power_total_KWH',
                'Accum_load_power_total_KWH', 'Accum_selfuse_power_total_KWH',
                'Accum_PVsell_power_total_KWH', 'Accum_grid_charger_power_total_KWH',
                
                // Error/Warning Messages
                'Error_message_1', 'Error_message_2', 'Error_message_3',
                'Warning_message_1', 'Warning_message_2',
                
                // Battery Data
                'Batt_serial_high', 'Batt_serial_low', 'Batt_hardware_version', 'Batt_software_version',
                'Batt_power_W', 'Batt_current_A', 'Batt_voltage_grade_V', 
                'Batt_rated_power_W', 'Batt_protocol_version'
            ];
            
            displayVariables.forEach((variable) => {
                const varInfo = solarVariables[variable] || {};
                const name = varInfo.name || variable.replace(/_/g, ' ');
                const unit = varInfo.unit || '';
                const value = latestData[variable] || '0';
            %>
            <div class="dashboard-card">
                <h3 class="card-title"><%= name %></h3>
                <div class="card-value" id="<%= variable.toLowerCase().replace(/_/g, '-') %>"><%= value %></div>
                <div class="card-unit"><%= unit %></div>
                <div class="info-btn" onclick="showTooltip(event, '<%= name %>', '<%= variable %>')">i</div>
            </div>
            <% }); %>
            
            <!-- Special combined Accumulated Time card -->
            <div class="dashboard-card">
                <h3 class="card-title">Accumulated Time</h3>
                <div class="card-value" id="accumulated-time">
                    <%= (latestData.Accum_time_days || 0) %>d 
                    <%= (latestData.Accum_time_hours || 0) %>h 
                    <%= (latestData.Accum_time_minutes || 0) %>m
                </div>
                <div class="card-unit">days hours minutes</div>
                <div class="info-btn" onclick="showTooltip(event, 'Accumulated Time', 'Total accumulated time shown as days, hours, and minutes')">i</div>
            </div> %>
        </div>
        <% } else { %>
        <div class="dashboard-card">
            <h3 class="card-title">No Data Available</h3>
            <p style="color: rgba(255,255,255,0.7);">Waiting for ESP32 to send data...</p>
        </div>
        <% } %>

        <!-- Chart Section -->
        <div class="chart-section">
            <h2>Data Visualization</h2>
            <div class="chart-controls">
                <button class="chart-btn" onclick="loadAllCharts('1h')">1 Hour</button>
                <button class="chart-btn active" onclick="loadAllCharts('6h')">6 Hours</button>
                <button class="chart-btn" onclick="loadAllCharts('12h')">12 Hours</button>
                <button class="chart-btn" onclick="loadAllCharts('24h')">24 Hours</button>
            </div>
            
            <!-- Three separate charts -->
            <div class="charts-grid">
                <div class="chart-container">
                    <h3 class="chart-subtitle">Bus Voltage [V]</h3>
                    <canvas id="pvVoltageChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3 class="chart-subtitle">Battery Voltage [V]</h3>
                    <canvas id="batteryVoltageChart"></canvas>
                </div>
                <div class="chart-container">
                    <h3 class="chart-subtitle">Inverter Power [W]</h3>
                    <canvas id="chargePowerChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Data History Table -->
        <div class="data-history">
            <h2 class="history-title">Recent Data History (<%= totalRecords %> total records)</h2>
            <div class="history-table-container">
                <table class="history-table">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Battery Voltage (V)</th>
                            <th>Grid Voltage (V)</th>
                            <th>Load Current (A)</th>
                            <th>Inverter Power (W)</th>
                            <th>Grid Power (W)</th>
                            <th>Load Power (W)</th>
                            <th class="mobile-hidden">Grid Frequency (Hz)</th>
                            <th class="mobile-hidden">AC Radiator Temp (°C)</th>
                            <th class="mobile-hidden">Transformer Temp (°C)</th>
                            <th class="mobile-hidden">DC Radiator Temp (°C)</th>
                            <th class="mobile-hidden">Inverter Relay</th>
                            <th class="mobile-hidden">Grid Relay</th>
                            <th class="mobile-hidden">Load Relay</th>
                            <th class="mobile-hidden">DC Relay</th>
                            <th class="mobile-hidden">Error Msg 1</th>
                            <th class="mobile-hidden">Warning Msg 1</th>
                            <th>Machine Type</th>
                        </tr>
                    </thead>
                    <tbody id="historyTableBody">
                        <% if (solarData && solarData.length > 0) { %>
                            <% const displayCount = Math.min(50, solarData.length); %>
                            <% solarData.slice(-displayCount).reverse().forEach((record, index) => { %>
                            <tr>
                                <td><%= new Date(record.timestamp).toLocaleString() %></td>
                                <td><%= record.Battery_voltage_V || '0' %></td>
                                <td><%= record.Grid_voltage_V || '0' %></td>
                                <td><%= record.Load_current_A || '0' %></td>
                                <td><%= record.P_Inverter_W || '0' %></td>
                                <td><%= record.P_Grid_W || '0' %></td>
                                <td><%= record.P_Load_W || '0' %></td>
                                <td class="mobile-hidden"><%= record.Grid_freq_Hz || '0' %></td>
                                <td class="mobile-hidden"><%= record.AC_radiator_temp_C || '0' %></td>
                                <td class="mobile-hidden"><%= record.Transformer_temp_C || '0' %></td>
                                <td class="mobile-hidden"><%= record.DC_radiator_temp_C || '0' %></td>
                                <td class="mobile-hidden"><%= record.Inverter_relay_state || '0' %></td>
                                <td class="mobile-hidden"><%= record.Grid_relay_state || '0' %></td>
                                <td class="mobile-hidden"><%= record.Load_relay_state || '0' %></td>
                                <td class="mobile-hidden"><%= record.DC_relay_state || '0' %></td>
                                <td class="mobile-hidden"><%= record.Error_message_1 || '0' %></td>
                                <td class="mobile-hidden"><%= record.Warning_message_1 || '0' %></td>
                                <td><%= record.Machine_type_high || '0' %></td>
                            </tr>
                            <% }); %>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Buttons Section - Outside the table container -->
        <% if (totalRecords > 10) { %>
        <div style="text-align: center; margin-top: 20px; display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
            <button class="load-more-btn" id="loadMoreBtn" onclick="loadMoreData()">
                Load More Data
            </button>
            <button class="export-btn" id="exportBtn" onclick="exportJsonData()">
                EXPORT JSON DATA
            </button>
        </div>
        <% } %>
    </div>

    <!-- Info Tooltip -->
    <div id="infoTooltip" class="info-tooltip">
        <button class="tooltip-close" onclick="hideTooltip()">×</button>
        <div class="tooltip-title" id="tooltipTitle"></div>
        <div id="tooltipDescription"></div>
    </div>

    <script>
        // Three separate chart instances
        let pvVoltageChart = null;
        let batteryVoltageChart = null;
        let chargePowerChart = null;
        
        let displayedRecords = 10;
        let totalAvailableRecords = <%= totalRecords || 0 %>;
        
        // Store last known values for all dashboard variables (delta reconstruction)
        let lastKnownDashboardValues = {};
        
        // Store last known values for chart delta reconstruction
        let lastKnownChartValues = {
            Bus_voltage_V: null,
            Battery_voltage_V: null,
            P_Grid_W: null
        };
        
        // Socket.IO connection for real-time updates
        const socket = io();
        
        socket.on('connect', () => {
            console.log('Socket.IO connected successfully');
        });
        
        socket.on('disconnect', () => {
            console.log('Socket.IO disconnected');
        });
        
        socket.on('solarDataUpdate', (data) => {
            console.log('=== REAL-TIME SOLAR DATA UPDATE ===');
            console.log('Full data object:', data);
            console.log('Data type:', data._type);
            console.log('Timestamp:', data.timestamp);
            console.log('Bus Voltage:', data.Bus_voltage_V);
            console.log('Battery Voltage:', data.Battery_voltage_V);
            console.log('Grid Power:', data.P_Grid_W);
            console.log('Charts exist - PV:', !!pvVoltageChart, 'Battery:', !!batteryVoltageChart, 'Power:', !!chargePowerChart);
            console.log('lastKnownDashboardValues keys:', Object.keys(lastKnownDashboardValues || {}));
            console.log('=====================================');
            updateDashboard(data);
        });

        function updateDashboard(data) {
            // Reconstruct full data for dashboard using delta logic
            const reconstructedData = reconstructDeltaForDashboard(data);
            
            // Update all dashboard values with reconstructed data
            const displayVariables = [
                'Bus_voltage_V', 'Battery_voltage_V', 'Control_current_A', 'P_Grid_W',
                'AC_radiator_temp_C', 'Transformer_temp_C', 'DC_relay_state', 'Grid_relay_state',
                'Error_message_1', 'Warning_message_1', 'Batt_voltage_grade_V', 'Rated_current_A',
                'Accum_charger_power_total_KWH', 'Accum_discharger_power_total_KWH', 'Serial_number_high', 'Serial_number_low', 'Hardware_version', 'Software_version',
                'Cal_PV_coeff', 'Cal_Batt_coeff', 'Control_current_A', 'Bus_voltage_V',
                'P_Grid_W', 'P_Inverter_W', 'Grid_freq_Hz', 'DC_radiator_temp_C', 'Machine_type_high'
            ];
            
            displayVariables.forEach(variable => {
                const elementId = variable.toLowerCase().replace(/_/g, '-');
                const element = document.getElementById(elementId);
                if (element && reconstructedData[variable] !== undefined) {
                    element.textContent = reconstructedData[variable];
                }
            });

            // Update combined Accumulated Time display with reconstructed data
            const accumulatedTimeElement = document.getElementById('accumulated-time');
            if (accumulatedTimeElement) {
                const days = reconstructedData.Accum_time_days || 0;
                const hours = reconstructedData.Accum_time_hours || 0;
                const minutes = reconstructedData.Accum_time_minutes || 0;
                accumulatedTimeElement.textContent = `${days}d ${hours}h ${minutes}m`;
            }

            // Update table with new real-time data
            updateTableWithNewData(data);

            // Update chart with new real-time data
            updateChartWithNewData(data);
        }

        function reconstructDeltaForDashboard(newData) {
            const allDashboardVariables = [
                // Basic Info
                'Machine_type_high', 'Machine_type_low', 'Serial_number_high', 'Serial_number_low', 
                'Hardware_version', 'Software_version', 'Protocol_version',
                
                // System Info
                'AC_voltage_grade', 'Rated_power_VA',
                
                // Voltages
                'Battery_voltage_V', 'Inverter_voltage_V', 'Grid_voltage_V', 'Bus_voltage_V',
                
                // Currents
                'Control_current_A', 'Inverter_current_A', 'Grid_current_A', 'Load_current_A',
                
                // Powers
                'P_Inverter_W', 'P_Grid_W', 'P_Load_W', 'Load_percent', 
                'S_Inverter_VA', 'S_Grid_VA', 'S_Load_VA',
                
                // Reactive Powers
                'Q_Inverter_var', 'Q_Grid_var', 'Q_Load_var',
                
                // Frequencies
                'Inverter_freq_Hz', 'Grid_freq_Hz',
                
                // Inverter Data
                'Inverter_max_number', 'Combine_type', 'Inverter_number',
                
                // Temperatures
                'AC_radiator_temp_C', 'Transformer_temp_C', 'DC_radiator_temp_C',
                
                // Relay States
                'Inverter_relay_state', 'Grid_relay_state', 'Load_relay_state', 
                'N_Line_relay_state', 'DC_relay_state', 'Earth_relay_state',
                
                // Accumulated Energy
                'Accum_charger_power_total_KWH', 'Accum_discharger_power_total_KWH',
                'Accum_buy_power_total_KWH', 'Accum_sell_power_total_KWH',
                'Accum_load_power_total_KWH', 'Accum_selfuse_power_total_KWH',
                'Accum_PVsell_power_total_KWH', 'Accum_grid_charger_power_total_KWH',
                
                // Error/Warning Messages
                'Error_message_1', 'Error_message_2', 'Error_message_3',
                'Warning_message_1', 'Warning_message_2',
                
                // Battery Data
                'Batt_serial_high', 'Batt_serial_low', 'Batt_hardware_version', 'Batt_software_version',
                'Batt_power_W', 'Batt_current_A', 'Batt_voltage_grade_V', 
                'Batt_rated_power_W', 'Batt_protocol_version'
            ];

            if (newData._type === 'delta') {
                // For delta records, update only changed values
                allDashboardVariables.forEach(variable => {
                    if (newData[variable] !== undefined) {
                        lastKnownDashboardValues[variable] = newData[variable];
                    }
                });
                
                console.log('Dashboard delta reconstruction - using last known values:', Object.keys(lastKnownDashboardValues).length, 'variables');
                
                // Return reconstructed data with all values
                const result = { timestamp: newData.timestamp };
                allDashboardVariables.forEach(variable => {
                    result[variable] = lastKnownDashboardValues[variable];
                });
                return result;
            } else {
                // Full record - update all values
                allDashboardVariables.forEach(variable => {
                    if (newData[variable] !== undefined) {
                        lastKnownDashboardValues[variable] = newData[variable];
                    }
                });
                
                console.log('Dashboard full record - updated all values');
                
                return newData;
            }
        }

        function updateTableWithNewData(newData) {
            const tbody = document.getElementById('historyTableBody');
            if (!tbody || !newData.timestamp) return;
            
            // Reconstruct full data for table display
            const reconstructedData = reconstructDeltaForTable(newData);
            
            // Create new row with reconstructed data
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>${new Date(reconstructedData.timestamp).toLocaleString()}</td>
                <td>${reconstructedData.Battery_voltage_V || '0'}</td>
                <td>${reconstructedData.Grid_voltage_V || '0'}</td>
                <td>${reconstructedData.Load_current_A || '0'}</td>
                <td>${reconstructedData.P_Inverter_W || '0'}</td>
                <td>${reconstructedData.P_Grid_W || '0'}</td>
                <td>${reconstructedData.P_Load_W || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Grid_freq_Hz || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.AC_radiator_temp_C || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Transformer_temp_C || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.DC_radiator_temp_C || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Inverter_relay_state || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Grid_relay_state || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Load_relay_state || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.DC_relay_state || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Error_message_1 || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Warning_message_1 || '0'}</td>
                <td>${reconstructedData.Machine_type_high || '0'}</td>
            `;
                <td class="mobile-hidden">${reconstructedData.DC_relay_state || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Grid_relay_state || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Error_message_1 || '0'}</td>
                <td class="mobile-hidden">${reconstructedData.Warning_message_1 || '0'}</td>
                <td>${reconstructedData.Machine_type_high || '0'}</td>
            `;
            
            // Insert new row at the top
            tbody.insertBefore(newRow, tbody.firstChild);
            
            // Remove the last row to maintain table size (keep last 10 visible)
            const rows = tbody.querySelectorAll('tr');
            if (rows.length > 10) {
                tbody.removeChild(rows[rows.length - 1]);
            }
            
            // Update total records count in header
            totalAvailableRecords++;
            const titleElement = document.querySelector('.history-title');
            if (titleElement) {
                titleElement.textContent = `Recent Data History (${totalAvailableRecords} total records)`;
            }
            
            console.log('Table updated with delta-reconstructed data');
        }

        // Store last known values for all table variables
        let lastKnownTableValues = {};

        function reconstructDeltaForTable(newData) {
            const allVariables = [
                'Bus_voltage_V', 'Battery_voltage_V', 'Control_current_A', 'P_Grid_W',
                'AC_radiator_temp_C', 'Board_temp_C', 'PV_current_A', 'Inverter_voltage_V',
                'P_Inverter_W', 'P_Total_W', 'AC_freq_Hz', 'DC_bus_temp_C',
                'Battery_relay', 'Inverter_relay', 'Error_message_1', 'Warning_message_1', 'Machine_type_high'
            ];

            if (newData._type === 'delta') {
                // For delta records, update only changed values
                allVariables.forEach(variable => {
                    if (newData[variable] !== undefined) {
                        lastKnownTableValues[variable] = newData[variable];
                    }
                });
                
                // Return reconstructed data with all values
                const result = { timestamp: newData.timestamp };
                allVariables.forEach(variable => {
                    result[variable] = lastKnownTableValues[variable];
                });
                return result;
            } else {
                // Full record - update all values
                allVariables.forEach(variable => {
                    lastKnownTableValues[variable] = newData[variable] || lastKnownTableValues[variable];
                });
                
                return newData;
            }
        }

        function updateChartWithNewData(newData) {
            if (!pvVoltageChart || !batteryVoltageChart || !chargePowerChart) {
                console.log('Charts not initialized yet, skipping real-time update');
                return;
            }
            
            if (!newData.timestamp) {
                console.log('No timestamp in new data, skipping chart update');
                return;
            }
            
            // Reconstruct full data using delta logic
            const reconstructedData = reconstructDeltaForChart(newData);
            
            const currentTime = new Date(newData.timestamp);
            const timeLabel = currentTime.toLocaleTimeString('en-US', { 
                hour: '2-digit', 
                minute: '2-digit', 
                hour12: true 
            });
            
            console.log('Updating charts with delta-reconstructed data:', {
                time: timeLabel,
                busVoltage: reconstructedData.Bus_voltage_V,
                batteryVoltage: reconstructedData.Battery_voltage_V,
                inverterPower: reconstructedData.P_Inverter_W,
                isDelta: newData._type === 'delta'
            });
            
            // Update all three charts with new data
            const maxPoints = 50;
            
            // Bus Voltage Chart
            pvVoltageChart.data.labels.push(timeLabel);
            pvVoltageChart.data.datasets[0].data.push(reconstructedData.Bus_voltage_V);
            // Add weekly average data point (stays constant)
            if (pvVoltageChart.data.datasets[1]) {
                const avgValue = pvVoltageChart.data.datasets[1].data[0] || 0;
                pvVoltageChart.data.datasets[1].data.push(avgValue);
            }
            if (pvVoltageChart.data.labels.length > maxPoints) {
                pvVoltageChart.data.labels.shift();
                pvVoltageChart.data.datasets[0].data.shift();
                if (pvVoltageChart.data.datasets[1]) {
                    pvVoltageChart.data.datasets[1].data.shift();
                }
            }
            pvVoltageChart.update('none');
            
            // Battery Voltage Chart
            batteryVoltageChart.data.labels.push(timeLabel);
            batteryVoltageChart.data.datasets[0].data.push(reconstructedData.Battery_voltage_V);
            // Add weekly average data point (stays constant)
            if (batteryVoltageChart.data.datasets[1]) {
                const avgValue = batteryVoltageChart.data.datasets[1].data[0] || 0;
                batteryVoltageChart.data.datasets[1].data.push(avgValue);
            }
            if (batteryVoltageChart.data.labels.length > maxPoints) {
                batteryVoltageChart.data.labels.shift();
                batteryVoltageChart.data.datasets[0].data.shift();
                if (batteryVoltageChart.data.datasets[1]) {
                    batteryVoltageChart.data.datasets[1].data.shift();
                }
            }
            batteryVoltageChart.update('none');
            
            // Grid Power Chart
            chargePowerChart.data.labels.push(timeLabel);
            chargePowerChart.data.datasets[0].data.push(reconstructedData.P_Inverter_W);
            // Add weekly average data point (stays constant)
            if (chargePowerChart.data.datasets[1]) {
                const avgValue = chargePowerChart.data.datasets[1].data[0] || 0;
                chargePowerChart.data.datasets[1].data.push(avgValue);
            }
            if (chargePowerChart.data.labels.length > maxPoints) {
                chargePowerChart.data.labels.shift();
                chargePowerChart.data.datasets[0].data.shift();
                if (chargePowerChart.data.datasets[1]) {
                    chargePowerChart.data.datasets[1].data.shift();
                }
            }
            chargePowerChart.update('none');
            
            console.log('All charts updated with delta-reconstructed data, total points:', pvVoltageChart.data.labels.length);
        }

        function reconstructDeltaForChart(newData) {
            // If this is a delta record, merge with last known values
            if (newData._type === 'delta') {
                // Update only the fields that are present in the delta
                if (newData.Battery_voltage_V !== undefined) {
                    lastKnownChartValues.Battery_voltage_V = newData.Battery_voltage_V;
                }
                if (newData.P_Inverter_W !== undefined) {
                    lastKnownChartValues.P_Inverter_W = newData.P_Inverter_W;
                }
                if (newData.P_Grid_W !== undefined) {
                    lastKnownChartValues.P_Grid_W = newData.P_Grid_W;
                }
                
                console.log('Chart delta reconstruction - using last known values:', lastKnownChartValues);
                
                // Return reconstructed data with all values
                return {
                    timestamp: newData.timestamp,
                    Battery_voltage_V: lastKnownChartValues.Battery_voltage_V,
                    P_Inverter_W: lastKnownChartValues.P_Inverter_W,
                    P_Grid_W: lastKnownChartValues.P_Grid_W
                };
            } else {
                // Full record - update all last known values
                lastKnownChartValues.Battery_voltage_V = newData.Battery_voltage_V || lastKnownChartValues.Battery_voltage_V;
                lastKnownChartValues.P_Inverter_W = newData.P_Inverter_W || lastKnownChartValues.P_Inverter_W;
                lastKnownChartValues.P_Grid_W = newData.P_Grid_W || lastKnownChartValues.P_Grid_W;
                
                console.log('Chart full record - updated last known values:', lastKnownChartValues);
                
                return {
                    timestamp: newData.timestamp,
                    Battery_voltage_V: newData.Battery_voltage_V || lastKnownChartValues.Battery_voltage_V,
                    P_Inverter_W: newData.P_Inverter_W || lastKnownChartValues.P_Inverter_W,
                    P_Grid_W: newData.P_Grid_W || lastKnownChartValues.P_Grid_W
                };
            }
        }

        function loadMoreData() {
            const button = document.getElementById('loadMoreBtn');
            const tbody = document.getElementById('historyTableBody');
            
            button.disabled = true;
            button.textContent = 'Loading...';
            
            // Fetch more data from server
            fetch(`/management/api/solar-data/load-more?offset=${displayedRecords}&limit=10`, {
                method: 'GET',
                headers: {
                    'x-api-key': '<%= process.env.API_SECRET || "your-secret-api-key-here" %>'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data.length > 0) {
                    // Add new rows to the table
                    data.data.forEach(record => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${new Date(record.timestamp).toLocaleString()}</td>
                            <td>${record.Battery_voltage_V || '0'}</td>
                            <td>${record.Grid_voltage_V || '0'}</td>
                            <td>${record.Load_current_A || '0'}</td>
                            <td>${record.P_Inverter_W || '0'}</td>
                            <td>${record.P_Grid_W || '0'}</td>
                            <td>${record.P_Load_W || '0'}</td>
                            <td class="mobile-hidden">${record.Grid_freq_Hz || '0'}</td>
                            <td class="mobile-hidden">${record.AC_radiator_temp_C || '0'}</td>
                            <td class="mobile-hidden">${record.Transformer_temp_C || '0'}</td>
                            <td class="mobile-hidden">${record.DC_radiator_temp_C || '0'}</td>
                            <td class="mobile-hidden">${record.Inverter_relay_state || '0'}</td>
                            <td class="mobile-hidden">${record.Grid_relay_state || '0'}</td>
                            <td class="mobile-hidden">${record.Load_relay_state || '0'}</td>
                            <td class="mobile-hidden">${record.DC_relay_state || '0'}</td>
                            <td class="mobile-hidden">${record.Error_message_1 || '0'}</td>
                            <td class="mobile-hidden">${record.Warning_message_1 || '0'}</td>
                            <td>${record.Machine_type_high || '0'}</td>
                        `;
                        tbody.appendChild(row);
                    });
                    
                    displayedRecords += data.data.length;
                    
                    // Hide button if no more data
                    if (!data.hasMore || data.data.length < 10) {
                        button.style.display = 'none';
                    } else {
                        button.disabled = false;
                        button.textContent = 'Load More Data';
                    }
                } else {
                    button.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error loading more data:', error);
                button.disabled = false;
                button.textContent = 'Load More Data';
            });
        }

        function exportJsonData() {
            const button = document.getElementById('exportBtn');
            button.disabled = true;
            button.textContent = 'Exporting...';
            
            // Get current date in dd.mm.yyyy format
            const now = new Date();
            const day = String(now.getDate()).padStart(2, '0');
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const year = now.getFullYear();
            const dateString = `${day}.${month}.${year}`;
            
            // Create filename
            const filename = `APARTMENT-SOLAR-EXPORT-${dateString}.json`;
            
            // Fetch the JSON data
            fetch('/api/export-solar-data', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Export failed');
                }
                return response.blob();
            })
            .then(blob => {
                // Create download link
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                button.disabled = false;
                button.textContent = 'EXPORT JSON DATA';
            })
            .catch(error => {
                console.error('Error exporting data:', error);
                showCustomAlert('Export failed. Please try again.');
                button.disabled = false;
                button.textContent = 'EXPORT JSON DATA';
            });
        }

        // Custom Alert Functions
        function showCustomAlert(message) {
            const alertModal = document.createElement('div');
            alertModal.className = 'modal';
            alertModal.style.display = 'block';
            alertModal.innerHTML = `
                <div class="modal-content" style="max-width: 400px; text-align: center;">
                    <div class="modal-body" style="padding: 2rem;">
                        <div style="color: #fff; font-size: 1.1rem; margin-bottom: 1.5rem; line-height: 1.4;">${message}</div>
                        <button onclick="this.closest('.modal').remove()" class="btn-primary" style="min-width: 100px;">OK</button>
                    </div>
                </div>
            `;
            document.body.appendChild(alertModal);
            
            // Close when clicking outside
            alertModal.onclick = function(event) {
                if (event.target === alertModal) {
                    alertModal.remove();
                }
            }
        }

        async function showTooltip(event, title, variableName) {
            const tooltip = document.getElementById('infoTooltip');
            const titleElement = document.getElementById('tooltipTitle');
            const descElement = document.getElementById('tooltipDescription');
            
            titleElement.textContent = title;
            descElement.textContent = 'Loading description...';
            
            // Show tooltip immediately with loading text
            tooltip.style.display = 'block';
            tooltip.style.position = 'fixed';
            tooltip.style.transform = 'none';
            
            // Fetch description from API
            try {
                const response = await fetch(`/management/api/variable-description/${encodeURIComponent(variableName)}`, {
                    headers: {
                        'x-api-key': '<%= process.env.API_SECRET || "your-secret-api-key-here" %>'
                    }
                });
                const data = await response.json();
                
                if (data.success && data.description) {
                    descElement.textContent = data.description;
                } else {
                    descElement.textContent = 'No description available';
                }
            } catch (error) {
                console.error('Error fetching variable description:', error);
                descElement.textContent = 'Error loading description';
            }
            
            // Get button position relative to viewport
            const rect = event.target.getBoundingClientRect();
            const isMobile = window.innerWidth <= 768;
            
            let left, top;
            
            if (isMobile) {
                // Mobile: position directly below the info button
                left = rect.left;
                top = rect.bottom + 5;
                
                // Ensure tooltip doesn't go off screen horizontally
                const tooltipWidth = 250;
                if (left + tooltipWidth > window.innerWidth) {
                    left = window.innerWidth - tooltipWidth - 10;
                }
                if (left < 10) {
                    left = 10;
                }
                
                // Ensure tooltip doesn't go off screen vertically
                const tooltipHeight = 80; // approximate height
                if (top + tooltipHeight > window.innerHeight) {
                    top = rect.top - tooltipHeight - 5;
                }
                
                tooltip.style.maxWidth = '250px';
            } else {
                // Desktop positioning
                left = rect.left;
                top = rect.bottom + 10;
                
                const tooltipWidth = 300;
                if (left + tooltipWidth > window.innerWidth) {
                    left = window.innerWidth - tooltipWidth - 20;
                }
                
                tooltip.style.maxWidth = '300px';
            }
            
            tooltip.style.left = left + 'px';
            tooltip.style.top = top + 'px';
            
            console.log('Button rect:', rect);
            console.log('Tooltip position:', { left, top });
        }

        function hideTooltip() {
            document.getElementById('infoTooltip').style.display = 'none';
        }

        // Hide tooltip when clicking outside
        document.addEventListener('click', function(event) {
            const tooltip = document.getElementById('infoTooltip');
            const infoBtn = event.target.closest('.info-btn');
            if (!infoBtn && !tooltip.contains(event.target)) {
                hideTooltip();
            }
        });

        // Hide tooltip when scrolling
        window.addEventListener('scroll', function() {
            const tooltip = document.getElementById('infoTooltip');
            if (tooltip.style.display === 'block') {
                hideTooltip();
            }
        });

        // Hide tooltip when touch scrolling on mobile
        window.addEventListener('touchmove', function() {
            const tooltip = document.getElementById('infoTooltip');
            if (tooltip.style.display === 'block') {
                hideTooltip();
            }
        });

        function loadAllCharts(timeRange) {
            // Save selection to cookie
            document.cookie = `chartTimeRange=${timeRange}; path=/; max-age=${30 * 24 * 60 * 60}`; // 30 days
            
            // Update active button
            document.querySelectorAll('.chart-btn').forEach(btn => {
                btn.classList.remove('active');
                // Check if this button matches the time range
                const btnText = btn.textContent.toLowerCase();
                const rangeText = timeRange.toLowerCase();
                if ((rangeText === '1h' && btnText.includes('1 hour')) ||
                    (rangeText === '6h' && btnText.includes('6 hours')) ||
                    (rangeText === '12h' && btnText.includes('12 hours')) ||
                    (rangeText === '24h' && btnText.includes('24 hours'))) {
                    btn.classList.add('active');
                }
            });
            
            // Fetch chart data
            fetch(`/api/solar/chart-data?range=${timeRange}`, {
                headers: {
                    'x-api-key': '<%= process.env.API_SECRET || "your-secret-api-key-here" %>'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateAllCharts(data);
                }
            })
            .catch(error => console.error('Error loading chart data:', error));
        }

        // Function to get cookie value
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        // Function to load chart without event (for initialization)
        function loadChartByRange(timeRange) {
            // Update active button
            document.querySelectorAll('.chart-btn').forEach(btn => {
                btn.classList.remove('active');
                const btnText = btn.textContent.toLowerCase();
                const rangeText = timeRange.toLowerCase();
                if ((rangeText === '1h' && btnText.includes('1 hour')) ||
                    (rangeText === '6h' && btnText.includes('6 hours')) ||
                    (rangeText === '12h' && btnText.includes('12 hours')) ||
                    (rangeText === '24h' && btnText.includes('24 hours'))) {
                    btn.classList.add('active');
                }
            });
            
            // Fetch chart data
            fetch(`/api/solar/chart-data?range=${timeRange}`, {
                headers: {
                    'x-api-key': '<%= process.env.API_SECRET || "your-secret-api-key-here" %>'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateAllCharts(data);
                }
            })
            .catch(error => console.error('Error loading chart data:', error));
        }

        function updateAllCharts(data) {
            // Destroy existing charts
            if (pvVoltageChart) {
                pvVoltageChart.destroy();
            }
            if (batteryVoltageChart) {
                batteryVoltageChart.destroy();
            }
            if (chargePowerChart) {
                chargePowerChart.destroy();
            }
            
            // Initialize last known values with the latest data point from chart
            if (data.batteryVoltage && data.batteryVoltage.length > 0) {
                lastKnownChartValues.Battery_voltage_V = data.batteryVoltage[data.batteryVoltage.length - 1];
            }
            if (data.inverterPower && data.inverterPower.length > 0) {
                lastKnownChartValues.P_Inverter_W = data.inverterPower[data.inverterPower.length - 1];
            }
            if (data.gridPower && data.gridPower.length > 0) {
                lastKnownChartValues.P_Grid_W = data.gridPower[data.gridPower.length - 1];
            }
            
            console.log('Initialized last known chart values for delta reconstruction:', lastKnownChartValues);
            
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.timePoints.map(time => new Date(time).toLocaleTimeString('en-US', { 
                        hour: '2-digit', 
                        minute: '2-digit', 
                        hour12: true 
                    })),
                    datasets: [
                        {
                            label: 'PV Voltage (V)',
                            data: data.pvVoltage,
                            borderColor: '#FF6B6B',
                            backgroundColor: 'rgba(255, 107, 107, 0.1)',
                            tension: 0.4
                        },
                        {
                            label: 'Battery Voltage (V)',
                            data: data.batteryVoltage,
                            borderColor: '#4ECDC4',
                            backgroundColor: 'rgba(78, 205, 196, 0.1)',
                            tension: 0.4
                        },
                        {
                            label: 'Charger Power (W)',
                            data: data.chargerPower,
                            borderColor: '#45B7D1',
                            backgroundColor: 'rgba(69, 183, 209, 0.1)',
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)',
                                maxTicksLimit: 10
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        },
                        y: {
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            },
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            }
                        }
                    }
                }
            });
        }

        // New implementation for three separate charts
        function updateAllCharts(data) {
            // Destroy existing charts
            if (pvVoltageChart) {
                pvVoltageChart.destroy();
            }
            if (batteryVoltageChart) {
                batteryVoltageChart.destroy();
            }
            if (chargePowerChart) {
                chargePowerChart.destroy();
            }

            // Initialize last known values with the latest data point from chart
            if (data.batteryVoltage && data.batteryVoltage.length > 0) {
                lastKnownChartValues.Battery_voltage_V = data.batteryVoltage[data.batteryVoltage.length - 1];
            }
            if (data.inverterPower && data.inverterPower.length > 0) {
                lastKnownChartValues.P_Inverter_W = data.inverterPower[data.inverterPower.length - 1];
            }
            if (data.gridPower && data.gridPower.length > 0) {
                lastKnownChartValues.P_Grid_W = data.gridPower[data.gridPower.length - 1];
            }
            
            console.log('Initialized last known chart values for delta reconstruction:', lastKnownChartValues);
            
            // Common chart configuration
            const chartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                elements: {
                    point: {
                        radius: window.innerWidth <= 768 ? 0 : 1,
                        hoverRadius: window.innerWidth <= 768 ? 3 : 4
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        align: 'center',
                        labels: {
                            color: 'rgba(255, 255, 255, 0.95)',
                            usePointStyle: true,
                            pointStyle: 'line',
                            padding: window.innerWidth <= 480 ? 8 : 10,
                            font: {
                                size: window.innerWidth <= 480 ? 11 : 12,
                                weight: '500'
                            },
                            generateLabels: function(chart) {
                                const original = Chart.defaults.plugins.legend.labels.generateLabels;
                                const labels = original.call(this, chart);
                                
                                labels.forEach((label, index) => {
                                    if (chart.data.datasets[index]) {
                                        const dataset = chart.data.datasets[index];
                                        label.pointStyle = 'line';
                                        label.lineDash = dataset.borderDash || [];
                                        label.lineWidth = dataset.borderWidth || 2;
                                        label.strokeStyle = dataset.borderColor;
                                        label.fillStyle = dataset.borderColor;
                                    }
                                });
                                
                                return labels;
                            }
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        titleFont: {
                            size: window.innerWidth <= 480 ? 11 : 12
                        },
                        bodyFont: {
                            size: window.innerWidth <= 480 ? 10 : 11
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.9)',
                            maxTicksLimit: window.innerWidth <= 768 ? 4 : 8,
                            font: {
                                size: window.innerWidth <= 480 ? 10 : 12,
                                weight: '500'
                            },
                            maxRotation: 45,
                            minRotation: 0
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    },
                    y: {
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.9)',
                            font: {
                                size: window.innerWidth <= 480 ? 10 : 12,
                                weight: '500'
                            },
                            maxTicksLimit: window.innerWidth <= 768 ? 6 : 8
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    }
                }
            };

            // Bus Voltage Chart (0-50V range)
            const pvCtx = document.getElementById('pvVoltageChart').getContext('2d');
            pvVoltageChart = new Chart(pvCtx, {
                type: 'line',
                data: {
                    labels: data.timePoints.map(time => new Date(time).toLocaleTimeString('en-US', { 
                        hour: '2-digit', 
                        minute: '2-digit', 
                        hour12: true 
                    })),
                    datasets: [{
                        label: 'Bus Voltage [V]',
                        data: data.busVoltage,
                        borderColor: '#FF6B6B',
                        backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        tension: 0.4,
                        borderWidth: 2,
                        pointRadius: 1,
                        pointHoverRadius: 4
                    }, {
                        label: 'Weekly Average',
                        data: Array(data.timePoints.length).fill(data.weeklyAverages?.busVoltage || 0),
                        borderColor: 'rgba(128, 128, 128, 0.9)',
                        backgroundColor: 'transparent',
                        borderDash: [5, 5],
                        borderWidth: 2,
                        pointRadius: 0,
                        pointHoverRadius: 0,
                        tension: 0
                    }]
                },
                options: {
                    ...chartOptions,
                    scales: {
                        ...chartOptions.scales,
                        y: {
                            ...chartOptions.scales.y,
                            min: 0,
                            max: 50,
                            ticks: {
                                ...chartOptions.scales.y.ticks,
                                callback: function(value) {
                                    return value + 'V';
                                }
                            }
                        }
                    }
                }
            });

            // Battery Voltage Chart (5-15V range)
            const batteryCtx = document.getElementById('batteryVoltageChart').getContext('2d');
            batteryVoltageChart = new Chart(batteryCtx, {
                type: 'line',
                data: {
                    labels: data.timePoints.map(time => new Date(time).toLocaleTimeString('en-US', { 
                        hour: '2-digit', 
                        minute: '2-digit', 
                        hour12: true 
                    })),
                    datasets: [{
                        label: 'Battery Voltage [V]',
                        data: data.batteryVoltage,
                        borderColor: '#4ECDC4',
                        backgroundColor: 'rgba(78, 205, 196, 0.1)',
                        tension: 0.4,
                        borderWidth: 2,
                        pointRadius: 1,
                        pointHoverRadius: 4
                    }, {
                        label: 'Weekly Average',
                        data: Array(data.timePoints.length).fill(data.weeklyAverages?.batteryVoltage || 0),
                        borderColor: 'rgba(128, 128, 128, 0.9)',
                        backgroundColor: 'transparent',
                        borderDash: [5, 5],
                        borderWidth: 2,
                        pointRadius: 0,
                        pointHoverRadius: 0,
                        tension: 0
                    }]
                },
                options: {
                    ...chartOptions,
                    scales: {
                        ...chartOptions.scales,
                        y: {
                            ...chartOptions.scales.y,
                            min: 5,
                            max: 15,
                            ticks: {
                                ...chartOptions.scales.y.ticks,
                                callback: function(value) {
                                    return value + 'V';
                                }
                            }
                        }
                    }
                }
            });

            // Inverter Power Chart (0-1000W range)
            const powerCtx = document.getElementById('chargePowerChart').getContext('2d');
            chargePowerChart = new Chart(powerCtx, {
                type: 'line',
                data: {
                    labels: data.timePoints.map(time => new Date(time).toLocaleTimeString('en-US', { 
                        hour: '2-digit', 
                        minute: '2-digit', 
                        hour12: true 
                    })),
                    datasets: [{
                        label: 'Inverter Power [W]',
                        data: data.inverterPower,
                        borderColor: '#45B7D1',
                        backgroundColor: 'rgba(69, 183, 209, 0.1)',
                        tension: 0.4,
                        borderWidth: 2,
                        pointRadius: 1,
                        pointHoverRadius: 4
                    }, {
                        label: 'Weekly Average',
                        data: Array(data.timePoints.length).fill(data.weeklyAverages?.inverterPower || 0),
                        borderColor: 'rgba(128, 128, 128, 0.9)',
                        backgroundColor: 'transparent',
                        borderDash: [5, 5],
                        borderWidth: 2,
                        pointRadius: 0,
                        pointHoverRadius: 0,
                        tension: 0
                    }]
                },
                options: {
                    ...chartOptions,
                    scales: {
                        ...chartOptions.scales,
                        y: {
                            ...chartOptions.scales.y,
                            min: 0,
                            max: 1000,
                            ticks: {
                                ...chartOptions.scales.y.ticks,
                                callback: function(value) {
                                    return value + 'W';
                                }
                            }
                        }
                    }
                }
            });
        }

        // Load initial chart
        window.addEventListener('load', function() {
            // Initialize table values from the first row
            initializeLastKnownTableValues();
            
            // Initialize dashboard values from current dashboard cards
            initializeLastKnownDashboardValues();
            
            setTimeout(() => {
                // Get saved time range from cookie, default to 6h
                const savedTimeRange = getCookie('chartTimeRange') || '6h';
                // Use loadAllCharts but don't save cookie again since we're loading from cookie
                loadChartByRange(savedTimeRange);
            }, 500);
        });

        function initializeLastKnownTableValues() {
            const tbody = document.getElementById('historyTableBody');
            const firstRow = tbody?.querySelector('tr');
            
            if (firstRow) {
                const cells = firstRow.querySelectorAll('td');
                
                // Map table columns to variable names
                const columnMapping = [
                    null, // timestamp
                    'Bus_voltage_V', 'Battery_voltage_V', 'Control_current_A', 'P_Grid_W',
                    'AC_radiator_temp_C', 'Board_temp_C', 'PV_current_A', 'Inverter_voltage_V',
                    'P_Inverter_W', 'P_Total_W', 'AC_freq_Hz', 'DC_bus_temp_C',
                    'Battery_relay', 'Inverter_relay', 'Error_message_1', 'Warning_message_1', 'Machine_type_high'
                ];
                
                columnMapping.forEach((varName, index) => {
                    if (varName && cells[index]) {
                        const value = cells[index].textContent.trim();
                        lastKnownTableValues[varName] = value !== '0' ? parseFloat(value) || value : 0;
                    }
                });
                
                console.log('Initialized last known table values:', lastKnownTableValues);
            }
        }

        function initializeLastKnownDashboardValues() {
            // Initialize dashboard values from current dashboard cards
            const allDashboardVariables = [
                'Bus_voltage_V', 'Battery_voltage_V', 'Control_current_A', 'P_Grid_W',
                'AC_radiator_temp_C', 'Board_temp_C', 'Battery_relay', 'Inverter_relay',
                'Error_message_1', 'Warning_message_1', 'Battery_grade_V', 'Control_rated_current_A',
                'Accum_energy_high', 'Accum_energy_low', 'Total_accum_time_days', 'Total_accum_time_hours',
                'Total_accum_time_minutes', 'Serial_number_high', 'Serial_number_low', 'Hardware_version', 'Software_version',
                'Calibration_PV_voltage', 'Calibration_battery_voltage', 'PV_current_A', 'Inverter_voltage_V',
                'P_Inverter_W', 'P_Total_W', 'AC_freq_Hz', 'DC_bus_temp_C', 'Machine_type_high'
            ];
            
            allDashboardVariables.forEach(variable => {
                const elementId = variable.toLowerCase().replace(/_/g, '-');
                const element = document.getElementById(elementId);
                if (element) {
                    const value = element.textContent.trim();
                    lastKnownDashboardValues[variable] = value !== '0' ? parseFloat(value) || value : 0;
                }
            });
            
            console.log('Initialized last known dashboard values:', Object.keys(lastKnownDashboardValues).length, 'variables');
        }
    </script>
</body>
</html>
